// Code generated by protoc-gen-go. DO NOT EDIT.
// source: synerex.proto

package synerex_api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GatewayType int32

const (
	GatewayType_BIDIRECTIONAL GatewayType = 0
	GatewayType_WRITE_ONLY    GatewayType = 1
	GatewayType_READ_ONLY     GatewayType = 2
)

var GatewayType_name = map[int32]string{
	0: "BIDIRECTIONAL",
	1: "WRITE_ONLY",
	2: "READ_ONLY",
}

var GatewayType_value = map[string]int32{
	"BIDIRECTIONAL": 0,
	"WRITE_ONLY":    1,
	"READ_ONLY":     2,
}

func (x GatewayType) String() string {
	return proto.EnumName(GatewayType_name, int32(x))
}

func (GatewayType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{0}
}

type MsgType int32

const (
	MsgType_DEMAND  MsgType = 0
	MsgType_SUPPLY  MsgType = 1
	MsgType_TARGET  MsgType = 2
	MsgType_MBUS    MsgType = 3
	MsgType_MBUSMSG MsgType = 4
)

var MsgType_name = map[int32]string{
	0: "DEMAND",
	1: "SUPPLY",
	2: "TARGET",
	3: "MBUS",
	4: "MBUSMSG",
}

var MsgType_value = map[string]int32{
	"DEMAND":  0,
	"SUPPLY":  1,
	"TARGET":  2,
	"MBUS":    3,
	"MBUSMSG": 4,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}

func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{1}
}

type MbusOpt_MbusType int32

const (
	MbusOpt_PUBLIC  MbusOpt_MbusType = 0
	MbusOpt_PRIVATE MbusOpt_MbusType = 1
)

var MbusOpt_MbusType_name = map[int32]string{
	0: "PUBLIC",
	1: "PRIVATE",
}

var MbusOpt_MbusType_value = map[string]int32{
	"PUBLIC":  0,
	"PRIVATE": 1,
}

func (x MbusOpt_MbusType) String() string {
	return proto.EnumName(MbusOpt_MbusType_name, int32(x))
}

func (MbusOpt_MbusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{9, 0}
}

type MbusState_MbusStatus int32

const (
	MbusState_INTIALIZED  MbusState_MbusStatus = 0
	MbusState_SUBSCRIBERS MbusState_MbusStatus = 1
	MbusState_CLOSED      MbusState_MbusStatus = 2
	MbusState_INVALID     MbusState_MbusStatus = 3
)

var MbusState_MbusStatus_name = map[int32]string{
	0: "INTIALIZED",
	1: "SUBSCRIBERS",
	2: "CLOSED",
	3: "INVALID",
}

var MbusState_MbusStatus_value = map[string]int32{
	"INTIALIZED":  0,
	"SUBSCRIBERS": 1,
	"CLOSED":      2,
	"INVALID":     3,
}

func (x MbusState_MbusStatus) String() string {
	return proto.EnumName(MbusState_MbusStatus_name, int32(x))
}

func (MbusState_MbusStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{10, 0}
}

type Response struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{0}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Response) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ConfirmResponse struct {
	Ok                   bool               `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	MbusId               uint64             `protobuf:"fixed64,2,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	Wait                 *duration.Duration `protobuf:"bytes,3,opt,name=wait,proto3" json:"wait,omitempty"`
	Err                  string             `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ConfirmResponse) Reset()         { *m = ConfirmResponse{} }
func (m *ConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmResponse) ProtoMessage()    {}
func (*ConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{1}
}

func (m *ConfirmResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfirmResponse.Unmarshal(m, b)
}
func (m *ConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfirmResponse.Marshal(b, m, deterministic)
}
func (m *ConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmResponse.Merge(m, src)
}
func (m *ConfirmResponse) XXX_Size() int {
	return xxx_messageInfo_ConfirmResponse.Size(m)
}
func (m *ConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmResponse proto.InternalMessageInfo

func (m *ConfirmResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ConfirmResponse) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

func (m *ConfirmResponse) GetWait() *duration.Duration {
	if m != nil {
		return m.Wait
	}
	return nil
}

func (m *ConfirmResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type Content struct {
	Entity               []byte   `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{2}
}

func (m *Content) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Content.Unmarshal(m, b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Content.Marshal(b, m, deterministic)
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return xxx_messageInfo_Content.Size(m)
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetEntity() []byte {
	if m != nil {
		return m.Entity
	}
	return nil
}

type Supply struct {
	Id                   uint64               `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId             uint64               `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId             uint64               `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	ChannelType          uint32               `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	SupplyName           string               `protobuf:"bytes,5,opt,name=supply_name,json=supplyName,proto3" json:"supply_name,omitempty"`
	Ts                   *timestamp.Timestamp `protobuf:"bytes,6,opt,name=ts,proto3" json:"ts,omitempty"`
	ArgJson              string               `protobuf:"bytes,7,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	MbusId               uint64               `protobuf:"fixed64,8,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	Cdata                *Content             `protobuf:"bytes,9,opt,name=cdata,proto3" json:"cdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Supply) Reset()         { *m = Supply{} }
func (m *Supply) String() string { return proto.CompactTextString(m) }
func (*Supply) ProtoMessage()    {}
func (*Supply) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{3}
}

func (m *Supply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Supply.Unmarshal(m, b)
}
func (m *Supply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Supply.Marshal(b, m, deterministic)
}
func (m *Supply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Supply.Merge(m, src)
}
func (m *Supply) XXX_Size() int {
	return xxx_messageInfo_Supply.Size(m)
}
func (m *Supply) XXX_DiscardUnknown() {
	xxx_messageInfo_Supply.DiscardUnknown(m)
}

var xxx_messageInfo_Supply proto.InternalMessageInfo

func (m *Supply) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Supply) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *Supply) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Supply) GetChannelType() uint32 {
	if m != nil {
		return m.ChannelType
	}
	return 0
}

func (m *Supply) GetSupplyName() string {
	if m != nil {
		return m.SupplyName
	}
	return ""
}

func (m *Supply) GetTs() *timestamp.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *Supply) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

func (m *Supply) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

func (m *Supply) GetCdata() *Content {
	if m != nil {
		return m.Cdata
	}
	return nil
}

type Demand struct {
	Id                   uint64               `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId             uint64               `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId             uint64               `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	ChannelType          uint32               `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	DemandName           string               `protobuf:"bytes,5,opt,name=demand_name,json=demandName,proto3" json:"demand_name,omitempty"`
	Ts                   *timestamp.Timestamp `protobuf:"bytes,6,opt,name=ts,proto3" json:"ts,omitempty"`
	ArgJson              string               `protobuf:"bytes,7,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	MbusId               uint64               `protobuf:"fixed64,8,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	Cdata                *Content             `protobuf:"bytes,9,opt,name=cdata,proto3" json:"cdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Demand) Reset()         { *m = Demand{} }
func (m *Demand) String() string { return proto.CompactTextString(m) }
func (*Demand) ProtoMessage()    {}
func (*Demand) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{4}
}

func (m *Demand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Demand.Unmarshal(m, b)
}
func (m *Demand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Demand.Marshal(b, m, deterministic)
}
func (m *Demand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Demand.Merge(m, src)
}
func (m *Demand) XXX_Size() int {
	return xxx_messageInfo_Demand.Size(m)
}
func (m *Demand) XXX_DiscardUnknown() {
	xxx_messageInfo_Demand.DiscardUnknown(m)
}

var xxx_messageInfo_Demand proto.InternalMessageInfo

func (m *Demand) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Demand) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *Demand) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Demand) GetChannelType() uint32 {
	if m != nil {
		return m.ChannelType
	}
	return 0
}

func (m *Demand) GetDemandName() string {
	if m != nil {
		return m.DemandName
	}
	return ""
}

func (m *Demand) GetTs() *timestamp.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *Demand) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

func (m *Demand) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

func (m *Demand) GetCdata() *Content {
	if m != nil {
		return m.Cdata
	}
	return nil
}

type Target struct {
	Id                   uint64             `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId             uint64             `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId             uint64             `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	ChannelType          uint32             `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	Wait                 *duration.Duration `protobuf:"bytes,5,opt,name=wait,proto3" json:"wait,omitempty"`
	MbusId               uint64             `protobuf:"fixed64,6,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{5}
}

func (m *Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Target.Unmarshal(m, b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Target.Marshal(b, m, deterministic)
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return xxx_messageInfo_Target.Size(m)
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

func (m *Target) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Target) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *Target) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Target) GetChannelType() uint32 {
	if m != nil {
		return m.ChannelType
	}
	return 0
}

func (m *Target) GetWait() *duration.Duration {
	if m != nil {
		return m.Wait
	}
	return nil
}

func (m *Target) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

type Channel struct {
	ClientId             uint64   `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ChannelType          uint32   `protobuf:"varint,2,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	ArgJson              string   `protobuf:"bytes,3,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{6}
}

func (m *Channel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Channel.Unmarshal(m, b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
}
func (m *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(m, src)
}
func (m *Channel) XXX_Size() int {
	return xxx_messageInfo_Channel.Size(m)
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Channel) GetChannelType() uint32 {
	if m != nil {
		return m.ChannelType
	}
	return 0
}

func (m *Channel) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

type Mbus struct {
	ClientId             uint64   `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	MbusId               uint64   `protobuf:"fixed64,2,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	ArgJson              string   `protobuf:"bytes,3,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Mbus) Reset()         { *m = Mbus{} }
func (m *Mbus) String() string { return proto.CompactTextString(m) }
func (*Mbus) ProtoMessage()    {}
func (*Mbus) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{7}
}

func (m *Mbus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mbus.Unmarshal(m, b)
}
func (m *Mbus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mbus.Marshal(b, m, deterministic)
}
func (m *Mbus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mbus.Merge(m, src)
}
func (m *Mbus) XXX_Size() int {
	return xxx_messageInfo_Mbus.Size(m)
}
func (m *Mbus) XXX_DiscardUnknown() {
	xxx_messageInfo_Mbus.DiscardUnknown(m)
}

var xxx_messageInfo_Mbus proto.InternalMessageInfo

func (m *Mbus) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Mbus) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

func (m *Mbus) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

type MbusMsg struct {
	MsgId                uint64   `protobuf:"fixed64,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	SenderId             uint64   `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId             uint64   `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	MbusId               uint64   `protobuf:"fixed64,4,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	MsgType              uint32   `protobuf:"varint,5,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
	MsgInfo              string   `protobuf:"bytes,6,opt,name=msg_info,json=msgInfo,proto3" json:"msg_info,omitempty"`
	ArgJson              string   `protobuf:"bytes,7,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	Cdata                *Content `protobuf:"bytes,8,opt,name=cdata,proto3" json:"cdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MbusMsg) Reset()         { *m = MbusMsg{} }
func (m *MbusMsg) String() string { return proto.CompactTextString(m) }
func (*MbusMsg) ProtoMessage()    {}
func (*MbusMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{8}
}

func (m *MbusMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MbusMsg.Unmarshal(m, b)
}
func (m *MbusMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MbusMsg.Marshal(b, m, deterministic)
}
func (m *MbusMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MbusMsg.Merge(m, src)
}
func (m *MbusMsg) XXX_Size() int {
	return xxx_messageInfo_MbusMsg.Size(m)
}
func (m *MbusMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_MbusMsg.DiscardUnknown(m)
}

var xxx_messageInfo_MbusMsg proto.InternalMessageInfo

func (m *MbusMsg) GetMsgId() uint64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *MbusMsg) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *MbusMsg) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *MbusMsg) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

func (m *MbusMsg) GetMsgType() uint32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *MbusMsg) GetMsgInfo() string {
	if m != nil {
		return m.MsgInfo
	}
	return ""
}

func (m *MbusMsg) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

func (m *MbusMsg) GetCdata() *Content {
	if m != nil {
		return m.Cdata
	}
	return nil
}

// options for creating Mbus from v0.4.0
type MbusOpt struct {
	MbusType             MbusOpt_MbusType `protobuf:"varint,1,opt,name=mbus_type,json=mbusType,proto3,enum=api.MbusOpt_MbusType" json:"mbus_type,omitempty"`
	Subscribers          []uint64         `protobuf:"fixed64,2,rep,packed,name=subscribers,proto3" json:"subscribers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MbusOpt) Reset()         { *m = MbusOpt{} }
func (m *MbusOpt) String() string { return proto.CompactTextString(m) }
func (*MbusOpt) ProtoMessage()    {}
func (*MbusOpt) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{9}
}

func (m *MbusOpt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MbusOpt.Unmarshal(m, b)
}
func (m *MbusOpt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MbusOpt.Marshal(b, m, deterministic)
}
func (m *MbusOpt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MbusOpt.Merge(m, src)
}
func (m *MbusOpt) XXX_Size() int {
	return xxx_messageInfo_MbusOpt.Size(m)
}
func (m *MbusOpt) XXX_DiscardUnknown() {
	xxx_messageInfo_MbusOpt.DiscardUnknown(m)
}

var xxx_messageInfo_MbusOpt proto.InternalMessageInfo

func (m *MbusOpt) GetMbusType() MbusOpt_MbusType {
	if m != nil {
		return m.MbusType
	}
	return MbusOpt_PUBLIC
}

func (m *MbusOpt) GetSubscribers() []uint64 {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

// message for obtaining mbus state from 0.4.0
type MbusState struct {
	MbusId               uint64               `protobuf:"fixed64,1,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	Status               MbusState_MbusStatus `protobuf:"varint,2,opt,name=status,proto3,enum=api.MbusState_MbusStatus" json:"status,omitempty"`
	Subscribers          []uint64             `protobuf:"fixed64,3,rep,packed,name=subscribers,proto3" json:"subscribers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MbusState) Reset()         { *m = MbusState{} }
func (m *MbusState) String() string { return proto.CompactTextString(m) }
func (*MbusState) ProtoMessage()    {}
func (*MbusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{10}
}

func (m *MbusState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MbusState.Unmarshal(m, b)
}
func (m *MbusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MbusState.Marshal(b, m, deterministic)
}
func (m *MbusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MbusState.Merge(m, src)
}
func (m *MbusState) XXX_Size() int {
	return xxx_messageInfo_MbusState.Size(m)
}
func (m *MbusState) XXX_DiscardUnknown() {
	xxx_messageInfo_MbusState.DiscardUnknown(m)
}

var xxx_messageInfo_MbusState proto.InternalMessageInfo

func (m *MbusState) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

func (m *MbusState) GetStatus() MbusState_MbusStatus {
	if m != nil {
		return m.Status
	}
	return MbusState_INTIALIZED
}

func (m *MbusState) GetSubscribers() []uint64 {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

type GatewayInfo struct {
	ClientId             uint64      `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	GatewayType          GatewayType `protobuf:"varint,2,opt,name=gateway_type,json=gatewayType,proto3,enum=api.GatewayType" json:"gateway_type,omitempty"`
	Channels             []uint32    `protobuf:"varint,3,rep,packed,name=channels,proto3" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GatewayInfo) Reset()         { *m = GatewayInfo{} }
func (m *GatewayInfo) String() string { return proto.CompactTextString(m) }
func (*GatewayInfo) ProtoMessage()    {}
func (*GatewayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{11}
}

func (m *GatewayInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayInfo.Unmarshal(m, b)
}
func (m *GatewayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayInfo.Marshal(b, m, deterministic)
}
func (m *GatewayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayInfo.Merge(m, src)
}
func (m *GatewayInfo) XXX_Size() int {
	return xxx_messageInfo_GatewayInfo.Size(m)
}
func (m *GatewayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayInfo proto.InternalMessageInfo

func (m *GatewayInfo) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *GatewayInfo) GetGatewayType() GatewayType {
	if m != nil {
		return m.GatewayType
	}
	return GatewayType_BIDIRECTIONAL
}

func (m *GatewayInfo) GetChannels() []uint32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

// Subscribe from Gateway to SynerexServer
type GatewayMsg struct {
	SrcSynerexId uint64  `protobuf:"fixed64,1,opt,name=src_synerex_id,json=srcSynerexId,proto3" json:"src_synerex_id,omitempty"`
	MsgType      MsgType `protobuf:"varint,2,opt,name=msg_type,json=msgType,proto3,enum=api.MsgType" json:"msg_type,omitempty"`
	// Types that are valid to be assigned to MsgOneof:
	//	*GatewayMsg_Demand
	//	*GatewayMsg_Supply
	//	*GatewayMsg_Target
	//	*GatewayMsg_Mbus
	//	*GatewayMsg_MbusMsg
	MsgOneof             isGatewayMsg_MsgOneof `protobuf_oneof:"msg_oneof"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GatewayMsg) Reset()         { *m = GatewayMsg{} }
func (m *GatewayMsg) String() string { return proto.CompactTextString(m) }
func (*GatewayMsg) ProtoMessage()    {}
func (*GatewayMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{12}
}

func (m *GatewayMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayMsg.Unmarshal(m, b)
}
func (m *GatewayMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayMsg.Marshal(b, m, deterministic)
}
func (m *GatewayMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMsg.Merge(m, src)
}
func (m *GatewayMsg) XXX_Size() int {
	return xxx_messageInfo_GatewayMsg.Size(m)
}
func (m *GatewayMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMsg proto.InternalMessageInfo

func (m *GatewayMsg) GetSrcSynerexId() uint64 {
	if m != nil {
		return m.SrcSynerexId
	}
	return 0
}

func (m *GatewayMsg) GetMsgType() MsgType {
	if m != nil {
		return m.MsgType
	}
	return MsgType_DEMAND
}

type isGatewayMsg_MsgOneof interface {
	isGatewayMsg_MsgOneof()
}

type GatewayMsg_Demand struct {
	Demand *Demand `protobuf:"bytes,3,opt,name=demand,proto3,oneof"`
}

type GatewayMsg_Supply struct {
	Supply *Supply `protobuf:"bytes,4,opt,name=supply,proto3,oneof"`
}

type GatewayMsg_Target struct {
	Target *Target `protobuf:"bytes,5,opt,name=target,proto3,oneof"`
}

type GatewayMsg_Mbus struct {
	Mbus *Mbus `protobuf:"bytes,6,opt,name=mbus,proto3,oneof"`
}

type GatewayMsg_MbusMsg struct {
	MbusMsg *MbusMsg `protobuf:"bytes,7,opt,name=mbus_msg,json=mbusMsg,proto3,oneof"`
}

func (*GatewayMsg_Demand) isGatewayMsg_MsgOneof() {}

func (*GatewayMsg_Supply) isGatewayMsg_MsgOneof() {}

func (*GatewayMsg_Target) isGatewayMsg_MsgOneof() {}

func (*GatewayMsg_Mbus) isGatewayMsg_MsgOneof() {}

func (*GatewayMsg_MbusMsg) isGatewayMsg_MsgOneof() {}

func (m *GatewayMsg) GetMsgOneof() isGatewayMsg_MsgOneof {
	if m != nil {
		return m.MsgOneof
	}
	return nil
}

func (m *GatewayMsg) GetDemand() *Demand {
	if x, ok := m.GetMsgOneof().(*GatewayMsg_Demand); ok {
		return x.Demand
	}
	return nil
}

func (m *GatewayMsg) GetSupply() *Supply {
	if x, ok := m.GetMsgOneof().(*GatewayMsg_Supply); ok {
		return x.Supply
	}
	return nil
}

func (m *GatewayMsg) GetTarget() *Target {
	if x, ok := m.GetMsgOneof().(*GatewayMsg_Target); ok {
		return x.Target
	}
	return nil
}

func (m *GatewayMsg) GetMbus() *Mbus {
	if x, ok := m.GetMsgOneof().(*GatewayMsg_Mbus); ok {
		return x.Mbus
	}
	return nil
}

func (m *GatewayMsg) GetMbusMsg() *MbusMsg {
	if x, ok := m.GetMsgOneof().(*GatewayMsg_MbusMsg); ok {
		return x.MbusMsg
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GatewayMsg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GatewayMsg_Demand)(nil),
		(*GatewayMsg_Supply)(nil),
		(*GatewayMsg_Target)(nil),
		(*GatewayMsg_Mbus)(nil),
		(*GatewayMsg_MbusMsg)(nil),
	}
}

type ProviderID struct {
	ClientId             uint64   `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ArgJson              string   `protobuf:"bytes,3,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProviderID) Reset()         { *m = ProviderID{} }
func (m *ProviderID) String() string { return proto.CompactTextString(m) }
func (*ProviderID) ProtoMessage()    {}
func (*ProviderID) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{13}
}

func (m *ProviderID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProviderID.Unmarshal(m, b)
}
func (m *ProviderID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProviderID.Marshal(b, m, deterministic)
}
func (m *ProviderID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderID.Merge(m, src)
}
func (m *ProviderID) XXX_Size() int {
	return xxx_messageInfo_ProviderID.Size(m)
}
func (m *ProviderID) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderID.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderID proto.InternalMessageInfo

func (m *ProviderID) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *ProviderID) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

type OAuthRequest struct {
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Time                 string   `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	PublicKey            string   `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Token                string   `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAuthRequest) Reset()         { *m = OAuthRequest{} }
func (m *OAuthRequest) String() string { return proto.CompactTextString(m) }
func (*OAuthRequest) ProtoMessage()    {}
func (*OAuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{14}
}

func (m *OAuthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OAuthRequest.Unmarshal(m, b)
}
func (m *OAuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OAuthRequest.Marshal(b, m, deterministic)
}
func (m *OAuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuthRequest.Merge(m, src)
}
func (m *OAuthRequest) XXX_Size() int {
	return xxx_messageInfo_OAuthRequest.Size(m)
}
func (m *OAuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OAuthRequest proto.InternalMessageInfo

func (m *OAuthRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *OAuthRequest) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *OAuthRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *OAuthRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type OAuthResponse struct {
	AccessToken          string   `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAuthResponse) Reset()         { *m = OAuthResponse{} }
func (m *OAuthResponse) String() string { return proto.CompactTextString(m) }
func (*OAuthResponse) ProtoMessage()    {}
func (*OAuthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{15}
}

func (m *OAuthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OAuthResponse.Unmarshal(m, b)
}
func (m *OAuthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OAuthResponse.Marshal(b, m, deterministic)
}
func (m *OAuthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuthResponse.Merge(m, src)
}
func (m *OAuthResponse) XXX_Size() int {
	return xxx_messageInfo_OAuthResponse.Size(m)
}
func (m *OAuthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OAuthResponse proto.InternalMessageInfo

func (m *OAuthResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func init() {
	proto.RegisterEnum("api.GatewayType", GatewayType_name, GatewayType_value)
	proto.RegisterEnum("api.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("api.MbusOpt_MbusType", MbusOpt_MbusType_name, MbusOpt_MbusType_value)
	proto.RegisterEnum("api.MbusState_MbusStatus", MbusState_MbusStatus_name, MbusState_MbusStatus_value)
	proto.RegisterType((*Response)(nil), "api.Response")
	proto.RegisterType((*ConfirmResponse)(nil), "api.ConfirmResponse")
	proto.RegisterType((*Content)(nil), "api.Content")
	proto.RegisterType((*Supply)(nil), "api.Supply")
	proto.RegisterType((*Demand)(nil), "api.Demand")
	proto.RegisterType((*Target)(nil), "api.Target")
	proto.RegisterType((*Channel)(nil), "api.Channel")
	proto.RegisterType((*Mbus)(nil), "api.Mbus")
	proto.RegisterType((*MbusMsg)(nil), "api.MbusMsg")
	proto.RegisterType((*MbusOpt)(nil), "api.MbusOpt")
	proto.RegisterType((*MbusState)(nil), "api.MbusState")
	proto.RegisterType((*GatewayInfo)(nil), "api.GatewayInfo")
	proto.RegisterType((*GatewayMsg)(nil), "api.GatewayMsg")
	proto.RegisterType((*ProviderID)(nil), "api.ProviderID")
	proto.RegisterType((*OAuthRequest)(nil), "api.OAuthRequest")
	proto.RegisterType((*OAuthResponse)(nil), "api.OAuthResponse")
}

func init() {
	proto.RegisterFile("synerex.proto", fileDescriptor_64312b9648bb40d3)
}

var fileDescriptor_64312b9648bb40d3 = []byte{
	// 1352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0xd6, 0xcd, 0x94, 0x74, 0x74, 0x31, 0x33, 0x48, 0xfe, 0x5f, 0x51, 0xd1, 0xc4, 0x61, 0x5b,
	0xc4, 0x4d, 0x13, 0x25, 0x55, 0xb2, 0xc9, 0xaa, 0xd0, 0x2d, 0x0e, 0x5b, 0x4b, 0x36, 0x28, 0x39,
	0x41, 0xb3, 0x11, 0x28, 0x71, 0xcc, 0xb0, 0x96, 0x38, 0x2c, 0x67, 0x54, 0x57, 0xc8, 0xb6, 0x4f,
	0xd1, 0x37, 0xe8, 0x43, 0x74, 0xd1, 0x47, 0xe9, 0xae, 0x8f, 0x51, 0xcc, 0x85, 0x22, 0x69, 0xd9,
	0xae, 0x81, 0x02, 0x41, 0x57, 0xe4, 0x9c, 0xf3, 0x9d, 0x99, 0xef, 0x9c, 0xf9, 0xe6, 0xcc, 0x40,
	0x8d, 0xae, 0x7d, 0x1c, 0xe2, 0x9f, 0x5b, 0x41, 0x48, 0x18, 0x41, 0x79, 0x3b, 0xf0, 0x9a, 0xf7,
	0x5d, 0x42, 0xdc, 0x05, 0x7e, 0x2a, 0x4c, 0xb3, 0xd5, 0xe9, 0x53, 0xe6, 0x2d, 0x31, 0x65, 0xf6,
	0x32, 0x90, 0xa8, 0xe6, 0xbd, 0x8b, 0x00, 0x67, 0x15, 0xda, 0xcc, 0x23, 0xbe, 0xf4, 0x1b, 0x8f,
	0xa1, 0x64, 0x61, 0x1a, 0x10, 0x9f, 0x62, 0x54, 0x87, 0x1c, 0x39, 0x6b, 0x64, 0xf7, 0xb2, 0xfb,
	0x25, 0x2b, 0x47, 0xce, 0x90, 0x0e, 0x79, 0x1c, 0x86, 0x8d, 0xdc, 0x5e, 0x76, 0xbf, 0x6c, 0xf1,
	0x5f, 0xe3, 0x03, 0xec, 0xf6, 0x88, 0x7f, 0xea, 0x85, 0xcb, 0x2b, 0x83, 0xfe, 0x0f, 0xc5, 0xe5,
	0x6c, 0x45, 0xa7, 0x9e, 0x23, 0x02, 0x35, 0x4b, 0xe3, 0x43, 0xd3, 0x41, 0x4f, 0xa0, 0x70, 0x6e,
	0x7b, 0xac, 0x91, 0xdf, 0xcb, 0xee, 0x57, 0xda, 0x77, 0x5b, 0x92, 0x58, 0x2b, 0x22, 0xd6, 0xea,
	0x2b, 0x62, 0x96, 0x80, 0x45, 0x8b, 0x17, 0xe2, 0xc5, 0x1f, 0x40, 0xb1, 0x47, 0x7c, 0x86, 0x7d,
	0x86, 0xfe, 0x07, 0x1a, 0xf6, 0x99, 0xc7, 0xd6, 0x62, 0xe1, 0xaa, 0xa5, 0x46, 0xc6, 0xaf, 0x39,
	0xd0, 0xc6, 0xab, 0x20, 0x58, 0xac, 0x39, 0x2f, 0xcf, 0x11, 0x6e, 0xcd, 0xca, 0x79, 0x0e, 0xfa,
	0x04, 0xca, 0x14, 0xfb, 0x0e, 0x0e, 0x63, 0x66, 0x25, 0x69, 0x30, 0x85, 0x93, 0xd9, 0xa1, 0x8b,
	0x19, 0x77, 0xe6, 0xa5, 0x53, 0x1a, 0x4c, 0x07, 0x3d, 0x80, 0xea, 0xfc, 0xbd, 0xed, 0xfb, 0x78,
	0x31, 0x65, 0xeb, 0x00, 0x0b, 0x4a, 0x35, 0xab, 0xa2, 0x6c, 0x93, 0x75, 0x80, 0xd1, 0x7d, 0xa8,
	0x50, 0xb1, 0xec, 0xd4, 0xb7, 0x97, 0xb8, 0xb1, 0x23, 0x48, 0x83, 0x34, 0x8d, 0xec, 0x25, 0x46,
	0x8f, 0x20, 0xc7, 0x68, 0x43, 0x13, 0xa9, 0x37, 0xb7, 0x52, 0x9f, 0x44, 0x9b, 0x66, 0xe5, 0x18,
	0x45, 0x77, 0xa1, 0x64, 0x87, 0xee, 0xf4, 0x07, 0x4a, 0xfc, 0x46, 0x51, 0xcc, 0x54, 0xb4, 0x43,
	0xf7, 0x5b, 0x4a, 0xfc, 0x64, 0x71, 0x4b, 0xa9, 0xe2, 0x1a, 0xb0, 0x33, 0x77, 0x6c, 0x66, 0x37,
	0xca, 0x62, 0x89, 0x6a, 0xcb, 0x0e, 0xbc, 0x96, 0xaa, 0x96, 0x25, 0x5d, 0xa2, 0x38, 0x7d, 0xbc,
	0xb4, 0x7d, 0xe7, 0xa3, 0x17, 0xc7, 0x11, 0xcb, 0xa6, 0x8a, 0x23, 0x4d, 0xff, 0x99, 0xe2, 0xfc,
	0x9e, 0x05, 0x6d, 0x22, 0x92, 0xfa, 0xb8, 0xc5, 0x89, 0x4e, 0xc5, 0xce, 0xcd, 0x4e, 0x45, 0x22,
	0x47, 0x2d, 0x99, 0xa3, 0xe1, 0x40, 0xb1, 0x27, 0xa7, 0xe5, 0x94, 0xe6, 0x0b, 0x0f, 0xfb, 0x82,
	0x92, 0x4c, 0xa3, 0x24, 0x0d, 0x97, 0x50, 0xca, 0x6d, 0x53, 0x4a, 0x96, 0x38, 0x9f, 0x2a, 0xb1,
	0xf1, 0x16, 0x0a, 0xc3, 0xd9, 0x8a, 0x5e, 0xbf, 0xc4, 0x95, 0x1d, 0xe0, 0x9a, 0x89, 0xff, 0xca,
	0x42, 0x91, 0xcf, 0x3c, 0xa4, 0x2e, 0xba, 0x03, 0xda, 0x92, 0xba, 0xf1, 0xcc, 0x3b, 0x4b, 0xea,
	0x9a, 0xff, 0x66, 0x1b, 0x12, 0x84, 0x0a, 0x17, 0x09, 0xf1, 0x95, 0x44, 0x21, 0x76, 0x44, 0x21,
	0x8a, 0x4b, 0xea, 0x46, 0x45, 0x10, 0x24, 0xfc, 0x53, 0x22, 0x2a, 0x5d, 0x16, 0x2e, 0xd3, 0x3f,
	0x25, 0xd7, 0x49, 0x70, 0xa3, 0xb4, 0xd2, 0xd5, 0x4a, 0xfb, 0x45, 0xa5, 0x7a, 0x14, 0x30, 0xd4,
	0x86, 0xb2, 0x60, 0x26, 0x18, 0xf0, 0x6c, 0xeb, 0xed, 0x3b, 0x22, 0x46, 0x01, 0xc4, 0x97, 0xf3,
	0xb1, 0x4a, 0x4b, 0xf5, 0x87, 0xf6, 0x78, 0xaf, 0x99, 0xd1, 0x79, 0xe8, 0xcd, 0x70, 0x48, 0x1b,
	0xb9, 0xbd, 0xfc, 0xbe, 0x66, 0x25, 0x4d, 0xc6, 0x67, 0x50, 0x8a, 0xe2, 0x10, 0x80, 0x76, 0x7c,
	0xd2, 0x3d, 0x34, 0x7b, 0x7a, 0x06, 0x55, 0xa0, 0x78, 0x6c, 0x99, 0x6f, 0x3a, 0x93, 0x81, 0x9e,
	0x35, 0xfe, 0xc8, 0x42, 0x99, 0xa3, 0xc6, 0xcc, 0x66, 0x38, 0x59, 0xa2, 0x6c, 0xaa, 0x44, 0x5f,
	0x83, 0x46, 0x99, 0xcd, 0x56, 0x54, 0x94, 0xbc, 0xde, 0xbe, 0xbb, 0xa1, 0x27, 0x02, 0x37, 0x7f,
	0x2b, 0x6a, 0x29, 0xe0, 0x45, 0x82, 0xf9, 0x6d, 0x82, 0xaf, 0x00, 0xe2, 0x38, 0x54, 0x07, 0x30,
	0x47, 0x13, 0xb3, 0x73, 0x68, 0xbe, 0x1b, 0xf4, 0xf5, 0x0c, 0xda, 0x85, 0xca, 0xf8, 0xa4, 0x3b,
	0xee, 0x59, 0x66, 0x77, 0x60, 0x8d, 0xf5, 0x2c, 0xcf, 0xa1, 0x77, 0x78, 0x34, 0x1e, 0xf4, 0xf5,
	0x1c, 0xcf, 0xc1, 0x1c, 0xbd, 0xe9, 0x1c, 0x9a, 0x7d, 0x3d, 0x6f, 0x7c, 0x80, 0xca, 0x81, 0xcd,
	0xf0, 0xb9, 0xbd, 0x16, 0x1b, 0x73, 0xad, 0x2a, 0x9f, 0x43, 0xd5, 0x95, 0xd8, 0x58, 0xf8, 0xf5,
	0xb6, 0x2e, 0xd2, 0x51, 0x93, 0x88, 0x42, 0x57, 0xdc, 0x78, 0x80, 0x9a, 0x50, 0x52, 0x27, 0x43,
	0xe6, 0x51, 0xb3, 0x36, 0x63, 0xe3, 0xb7, 0x1c, 0x80, 0x0a, 0xe4, 0xaa, 0xfd, 0x1c, 0xea, 0x34,
	0x9c, 0x4f, 0xd5, 0x1d, 0x1d, 0x33, 0xa8, 0xd2, 0x70, 0x3e, 0x96, 0x46, 0xd3, 0x41, 0x0f, 0x13,
	0x8a, 0x93, 0x0c, 0xa4, 0x46, 0x86, 0x52, 0x76, 0xb1, 0xfe, 0xbe, 0x00, 0x4d, 0x76, 0x48, 0x75,
	0x5f, 0x56, 0x04, 0x4c, 0xb6, 0xef, 0xd7, 0x19, 0x4b, 0x39, 0x39, 0x4c, 0xde, 0x32, 0x42, 0xd9,
	0x11, 0x4c, 0x5e, 0x81, 0x1c, 0x26, 0x9d, 0x1c, 0x26, 0x4f, 0x83, 0xea, 0x33, 0x12, 0x26, 0xfb,
	0x1d, 0x87, 0x49, 0x27, 0xba, 0x0f, 0x05, 0xbe, 0xed, 0xaa, 0x15, 0x97, 0x37, 0x5b, 0xfd, 0x3a,
	0x63, 0x09, 0x07, 0xfa, 0x12, 0x84, 0x0e, 0xa7, 0x4b, 0xea, 0x0a, 0xe9, 0x47, 0x12, 0x57, 0x47,
	0xf7, 0x75, 0xc6, 0x12, 0x32, 0x1a, 0x52, 0xb7, 0x5b, 0x81, 0x32, 0xcf, 0x94, 0xf8, 0x98, 0x9c,
	0x1a, 0x7d, 0x80, 0xe3, 0x90, 0xfc, 0xe4, 0xf1, 0xc3, 0xda, 0xbf, 0x7e, 0x9f, 0xae, 0x69, 0x12,
	0x01, 0x54, 0x8f, 0x3a, 0x2b, 0xf6, 0xde, 0xc2, 0x3f, 0xae, 0x30, 0x15, 0xcd, 0xd0, 0x27, 0x0e,
	0x8e, 0x66, 0x29, 0x5b, 0x1a, 0x1f, 0x9a, 0x0e, 0x42, 0x50, 0xe0, 0xef, 0x20, 0xf5, 0x72, 0x11,
	0xff, 0xe8, 0x53, 0x80, 0x60, 0x35, 0x5b, 0x78, 0xf3, 0xe9, 0x19, 0x5e, 0xab, 0x99, 0xcb, 0xd2,
	0xf2, 0x1d, 0x5e, 0xa3, 0xdb, 0xb0, 0xc3, 0xc8, 0x19, 0xf6, 0xd5, 0x83, 0x43, 0x0e, 0x8c, 0x36,
	0xd4, 0xd4, 0x8a, 0xea, 0xb5, 0xf3, 0x00, 0xaa, 0xf6, 0x7c, 0x8e, 0x29, 0x9d, 0x4a, 0xb4, 0x5c,
	0xb7, 0x22, 0x6d, 0x13, 0x6e, 0x7a, 0xf4, 0xcd, 0x46, 0x94, 0x62, 0x23, 0x6f, 0x41, 0xad, 0x6b,
	0xf6, 0x4d, 0x6b, 0xd0, 0x9b, 0x98, 0x47, 0xa3, 0xce, 0xa1, 0x9e, 0xe1, 0x82, 0x7f, 0x6b, 0x99,
	0x93, 0xc1, 0xf4, 0x68, 0x74, 0xf8, 0xbd, 0x9e, 0x45, 0x35, 0x28, 0x5b, 0x83, 0x4e, 0x5f, 0x0e,
	0x73, 0x8f, 0xfa, 0x50, 0x54, 0x72, 0xe0, 0xca, 0xef, 0x0f, 0x86, 0x9d, 0x11, 0x3f, 0x16, 0x00,
	0xda, 0xf8, 0xe4, 0xf8, 0x58, 0x44, 0x00, 0x68, 0x93, 0x8e, 0x75, 0x30, 0x98, 0xe8, 0x39, 0x54,
	0x82, 0xc2, 0xb0, 0x7b, 0x32, 0xd6, 0xf3, 0xfc, 0x6c, 0xf0, 0xbf, 0xe1, 0xf8, 0x40, 0x2f, 0xb4,
	0xff, 0x2c, 0x42, 0x51, 0xe9, 0x0e, 0x3d, 0x86, 0xea, 0x88, 0x30, 0xef, 0x74, 0xad, 0xae, 0xff,
	0xa4, 0x98, 0x9a, 0x35, 0x31, 0x88, 0x32, 0x34, 0x32, 0x31, 0x5a, 0xbd, 0xa4, 0x92, 0x9a, 0xda,
	0x46, 0x3f, 0x81, 0xda, 0x71, 0x48, 0x02, 0x42, 0xf1, 0x8d, 0x26, 0x8f, 0xe1, 0x37, 0x9a, 0xfd,
	0x39, 0x54, 0xc7, 0x78, 0x81, 0xe7, 0x2c, 0x85, 0x96, 0xc2, 0x6d, 0xde, 0x8e, 0xda, 0x6b, 0xf2,
	0x41, 0x9a, 0x0c, 0x4a, 0x31, 0xfa, 0x87, 0xa0, 0x87, 0xe2, 0x75, 0xc9, 0x8d, 0x69, 0xfc, 0x16,
	0xa5, 0x67, 0xb0, 0x3b, 0x8e, 0x7a, 0x99, 0x5a, 0x40, 0xf5, 0x79, 0xd9, 0x19, 0x9a, 0xc9, 0x02,
	0x18, 0x99, 0x67, 0xd9, 0x54, 0x84, 0xca, 0xe3, 0xb2, 0x08, 0xe9, 0x12, 0x11, 0x0f, 0x01, 0x7a,
	0x21, 0xb6, 0x19, 0x16, 0xb7, 0x6d, 0x35, 0x79, 0x25, 0x34, 0xe3, 0x63, 0x29, 0x58, 0x97, 0x7b,
	0x0b, 0x42, 0x25, 0x2e, 0xf6, 0x5c, 0xb6, 0xa9, 0xb5, 0x0d, 0x87, 0x8b, 0xe0, 0xd4, 0x19, 0x16,
	0xeb, 0x3f, 0x86, 0xca, 0x18, 0xfb, 0x4e, 0x74, 0x23, 0xa7, 0x00, 0xdb, 0x73, 0x7f, 0x05, 0xd5,
	0x03, 0xcc, 0xe2, 0xcb, 0x24, 0x31, 0x75, 0x3d, 0x7d, 0x5d, 0x18, 0x19, 0xf4, 0x12, 0xf4, 0x0d,
	0x11, 0x75, 0x4e, 0x50, 0xaa, 0x0b, 0xf3, 0x56, 0xde, 0xdc, 0x4d, 0x5a, 0x22, 0x56, 0x2f, 0x40,
	0x7f, 0x45, 0xc2, 0x73, 0x3b, 0x74, 0x26, 0x24, 0x0a, 0xbd, 0x08, 0xbc, 0x4c, 0x42, 0x48, 0x94,
	0x48, 0x6e, 0x48, 0xf4, 0x48, 0x4a, 0x6f, 0xc0, 0x95, 0x41, 0x72, 0x4f, 0x6e, 0x18, 0xf4, 0x02,
	0x74, 0x11, 0xd4, 0x59, 0x2c, 0x14, 0x86, 0x2a, 0x7e, 0x71, 0xf3, 0xdb, 0x8e, 0x7a, 0x09, 0xf5,
	0x03, 0xcc, 0x3a, 0x71, 0x07, 0x41, 0xb7, 0x04, 0x24, 0xd9, 0xea, 0x9a, 0x28, 0x69, 0x8a, 0x42,
	0xbb, 0x7b, 0xef, 0xee, 0xb9, 0x1e, 0x7b, 0xbf, 0x9a, 0xb5, 0xe6, 0x64, 0xf9, 0x54, 0x5d, 0x3d,
	0xd1, 0x77, 0x6a, 0x07, 0xde, 0x4c, 0x13, 0x0f, 0xc9, 0xe7, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x8d, 0x59, 0x7c, 0xf0, 0x3c, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SynerexClient is the client API for Synerex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SynerexClient interface {
	NotifyDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error)
	NotifySupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error)
	ProposeDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error)
	ProposeSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error)
	SelectSupply(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error)
	SelectDemand(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error)
	Confirm(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Response, error)
	SubscribeDemand(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeDemandClient, error)
	SubscribeSupply(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeSupplyClient, error)
	CreateMbus(ctx context.Context, in *MbusOpt, opts ...grpc.CallOption) (*Mbus, error)
	CloseMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (*Response, error)
	SubscribeMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (Synerex_SubscribeMbusClient, error)
	SendMbusMsg(ctx context.Context, in *MbusMsg, opts ...grpc.CallOption) (*Response, error)
	GetMbusState(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (*MbusState, error)
	SubscribeGateway(ctx context.Context, in *GatewayInfo, opts ...grpc.CallOption) (Synerex_SubscribeGatewayClient, error)
	ForwardToGateway(ctx context.Context, in *GatewayMsg, opts ...grpc.CallOption) (*Response, error)
	CloseDemandChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Response, error)
	CloseSupplyChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Response, error)
	CloseAllChannels(ctx context.Context, in *ProviderID, opts ...grpc.CallOption) (*Response, error)
	GetAccessToken(ctx context.Context, in *OAuthRequest, opts ...grpc.CallOption) (*OAuthResponse, error)
}

type synerexClient struct {
	cc grpc.ClientConnInterface
}

func NewSynerexClient(cc grpc.ClientConnInterface) SynerexClient {
	return &synerexClient{cc}
}

func (c *synerexClient) NotifyDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/NotifyDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) NotifySupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/NotifySupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) ProposeDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/ProposeDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) ProposeSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/ProposeSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SelectSupply(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/api.Synerex/SelectSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SelectDemand(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/api.Synerex/SelectDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) Confirm(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SubscribeDemand(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeDemandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[0], "/api.Synerex/SubscribeDemand", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeDemandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeDemandClient interface {
	Recv() (*Demand, error)
	grpc.ClientStream
}

type synerexSubscribeDemandClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeDemandClient) Recv() (*Demand, error) {
	m := new(Demand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) SubscribeSupply(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeSupplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[1], "/api.Synerex/SubscribeSupply", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeSupplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeSupplyClient interface {
	Recv() (*Supply, error)
	grpc.ClientStream
}

type synerexSubscribeSupplyClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeSupplyClient) Recv() (*Supply, error) {
	m := new(Supply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) CreateMbus(ctx context.Context, in *MbusOpt, opts ...grpc.CallOption) (*Mbus, error) {
	out := new(Mbus)
	err := c.cc.Invoke(ctx, "/api.Synerex/CreateMbus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) CloseMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/CloseMbus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SubscribeMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (Synerex_SubscribeMbusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[2], "/api.Synerex/SubscribeMbus", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeMbusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeMbusClient interface {
	Recv() (*MbusMsg, error)
	grpc.ClientStream
}

type synerexSubscribeMbusClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeMbusClient) Recv() (*MbusMsg, error) {
	m := new(MbusMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) SendMbusMsg(ctx context.Context, in *MbusMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/SendMbusMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) GetMbusState(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (*MbusState, error) {
	out := new(MbusState)
	err := c.cc.Invoke(ctx, "/api.Synerex/GetMbusState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SubscribeGateway(ctx context.Context, in *GatewayInfo, opts ...grpc.CallOption) (Synerex_SubscribeGatewayClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[3], "/api.Synerex/SubscribeGateway", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeGatewayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeGatewayClient interface {
	Recv() (*GatewayMsg, error)
	grpc.ClientStream
}

type synerexSubscribeGatewayClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeGatewayClient) Recv() (*GatewayMsg, error) {
	m := new(GatewayMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) ForwardToGateway(ctx context.Context, in *GatewayMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/ForwardToGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) CloseDemandChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/CloseDemandChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) CloseSupplyChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/CloseSupplyChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) CloseAllChannels(ctx context.Context, in *ProviderID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/CloseAllChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) GetAccessToken(ctx context.Context, in *OAuthRequest, opts ...grpc.CallOption) (*OAuthResponse, error) {
	out := new(OAuthResponse)
	err := c.cc.Invoke(ctx, "/api.Synerex/GetAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SynerexServer is the server API for Synerex service.
type SynerexServer interface {
	NotifyDemand(context.Context, *Demand) (*Response, error)
	NotifySupply(context.Context, *Supply) (*Response, error)
	ProposeDemand(context.Context, *Demand) (*Response, error)
	ProposeSupply(context.Context, *Supply) (*Response, error)
	SelectSupply(context.Context, *Target) (*ConfirmResponse, error)
	SelectDemand(context.Context, *Target) (*ConfirmResponse, error)
	Confirm(context.Context, *Target) (*Response, error)
	SubscribeDemand(*Channel, Synerex_SubscribeDemandServer) error
	SubscribeSupply(*Channel, Synerex_SubscribeSupplyServer) error
	CreateMbus(context.Context, *MbusOpt) (*Mbus, error)
	CloseMbus(context.Context, *Mbus) (*Response, error)
	SubscribeMbus(*Mbus, Synerex_SubscribeMbusServer) error
	SendMbusMsg(context.Context, *MbusMsg) (*Response, error)
	GetMbusState(context.Context, *Mbus) (*MbusState, error)
	SubscribeGateway(*GatewayInfo, Synerex_SubscribeGatewayServer) error
	ForwardToGateway(context.Context, *GatewayMsg) (*Response, error)
	CloseDemandChannel(context.Context, *Channel) (*Response, error)
	CloseSupplyChannel(context.Context, *Channel) (*Response, error)
	CloseAllChannels(context.Context, *ProviderID) (*Response, error)
	GetAccessToken(context.Context, *OAuthRequest) (*OAuthResponse, error)
}

// UnimplementedSynerexServer can be embedded to have forward compatible implementations.
type UnimplementedSynerexServer struct {
}

func (*UnimplementedSynerexServer) NotifyDemand(ctx context.Context, req *Demand) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyDemand not implemented")
}
func (*UnimplementedSynerexServer) NotifySupply(ctx context.Context, req *Supply) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySupply not implemented")
}
func (*UnimplementedSynerexServer) ProposeDemand(ctx context.Context, req *Demand) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeDemand not implemented")
}
func (*UnimplementedSynerexServer) ProposeSupply(ctx context.Context, req *Supply) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeSupply not implemented")
}
func (*UnimplementedSynerexServer) SelectSupply(ctx context.Context, req *Target) (*ConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectSupply not implemented")
}
func (*UnimplementedSynerexServer) SelectDemand(ctx context.Context, req *Target) (*ConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectDemand not implemented")
}
func (*UnimplementedSynerexServer) Confirm(ctx context.Context, req *Target) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (*UnimplementedSynerexServer) SubscribeDemand(req *Channel, srv Synerex_SubscribeDemandServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDemand not implemented")
}
func (*UnimplementedSynerexServer) SubscribeSupply(req *Channel, srv Synerex_SubscribeSupplyServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSupply not implemented")
}
func (*UnimplementedSynerexServer) CreateMbus(ctx context.Context, req *MbusOpt) (*Mbus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMbus not implemented")
}
func (*UnimplementedSynerexServer) CloseMbus(ctx context.Context, req *Mbus) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseMbus not implemented")
}
func (*UnimplementedSynerexServer) SubscribeMbus(req *Mbus, srv Synerex_SubscribeMbusServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMbus not implemented")
}
func (*UnimplementedSynerexServer) SendMbusMsg(ctx context.Context, req *MbusMsg) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMbusMsg not implemented")
}
func (*UnimplementedSynerexServer) GetMbusState(ctx context.Context, req *Mbus) (*MbusState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMbusState not implemented")
}
func (*UnimplementedSynerexServer) SubscribeGateway(req *GatewayInfo, srv Synerex_SubscribeGatewayServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeGateway not implemented")
}
func (*UnimplementedSynerexServer) ForwardToGateway(ctx context.Context, req *GatewayMsg) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardToGateway not implemented")
}
func (*UnimplementedSynerexServer) CloseDemandChannel(ctx context.Context, req *Channel) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseDemandChannel not implemented")
}
func (*UnimplementedSynerexServer) CloseSupplyChannel(ctx context.Context, req *Channel) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSupplyChannel not implemented")
}
func (*UnimplementedSynerexServer) CloseAllChannels(ctx context.Context, req *ProviderID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseAllChannels not implemented")
}
func (*UnimplementedSynerexServer) GetAccessToken(ctx context.Context, req *OAuthRequest) (*OAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}

func RegisterSynerexServer(s *grpc.Server, srv SynerexServer) {
	s.RegisterService(&_Synerex_serviceDesc, srv)
}

func _Synerex_NotifyDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Demand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).NotifyDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/NotifyDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).NotifyDemand(ctx, req.(*Demand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_NotifySupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Supply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).NotifySupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/NotifySupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).NotifySupply(ctx, req.(*Supply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_ProposeDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Demand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).ProposeDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/ProposeDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).ProposeDemand(ctx, req.(*Demand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_ProposeSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Supply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).ProposeSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/ProposeSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).ProposeSupply(ctx, req.(*Supply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SelectSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).SelectSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/SelectSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).SelectSupply(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SelectDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).SelectDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/SelectDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).SelectDemand(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).Confirm(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SubscribeDemand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeDemand(m, &synerexSubscribeDemandServer{stream})
}

type Synerex_SubscribeDemandServer interface {
	Send(*Demand) error
	grpc.ServerStream
}

type synerexSubscribeDemandServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeDemandServer) Send(m *Demand) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_SubscribeSupply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeSupply(m, &synerexSubscribeSupplyServer{stream})
}

type Synerex_SubscribeSupplyServer interface {
	Send(*Supply) error
	grpc.ServerStream
}

type synerexSubscribeSupplyServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeSupplyServer) Send(m *Supply) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_CreateMbus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MbusOpt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CreateMbus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CreateMbus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CreateMbus(ctx, req.(*MbusOpt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_CloseMbus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mbus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CloseMbus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CloseMbus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CloseMbus(ctx, req.(*Mbus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SubscribeMbus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Mbus)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeMbus(m, &synerexSubscribeMbusServer{stream})
}

type Synerex_SubscribeMbusServer interface {
	Send(*MbusMsg) error
	grpc.ServerStream
}

type synerexSubscribeMbusServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeMbusServer) Send(m *MbusMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_SendMbusMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MbusMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).SendMbusMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/SendMbusMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).SendMbusMsg(ctx, req.(*MbusMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_GetMbusState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mbus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).GetMbusState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/GetMbusState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).GetMbusState(ctx, req.(*Mbus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SubscribeGateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GatewayInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeGateway(m, &synerexSubscribeGatewayServer{stream})
}

type Synerex_SubscribeGatewayServer interface {
	Send(*GatewayMsg) error
	grpc.ServerStream
}

type synerexSubscribeGatewayServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeGatewayServer) Send(m *GatewayMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_ForwardToGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).ForwardToGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/ForwardToGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).ForwardToGateway(ctx, req.(*GatewayMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_CloseDemandChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CloseDemandChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CloseDemandChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CloseDemandChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_CloseSupplyChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CloseSupplyChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CloseSupplyChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CloseSupplyChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_CloseAllChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CloseAllChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CloseAllChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CloseAllChannels(ctx, req.(*ProviderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/GetAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).GetAccessToken(ctx, req.(*OAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Synerex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Synerex",
	HandlerType: (*SynerexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyDemand",
			Handler:    _Synerex_NotifyDemand_Handler,
		},
		{
			MethodName: "NotifySupply",
			Handler:    _Synerex_NotifySupply_Handler,
		},
		{
			MethodName: "ProposeDemand",
			Handler:    _Synerex_ProposeDemand_Handler,
		},
		{
			MethodName: "ProposeSupply",
			Handler:    _Synerex_ProposeSupply_Handler,
		},
		{
			MethodName: "SelectSupply",
			Handler:    _Synerex_SelectSupply_Handler,
		},
		{
			MethodName: "SelectDemand",
			Handler:    _Synerex_SelectDemand_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _Synerex_Confirm_Handler,
		},
		{
			MethodName: "CreateMbus",
			Handler:    _Synerex_CreateMbus_Handler,
		},
		{
			MethodName: "CloseMbus",
			Handler:    _Synerex_CloseMbus_Handler,
		},
		{
			MethodName: "SendMbusMsg",
			Handler:    _Synerex_SendMbusMsg_Handler,
		},
		{
			MethodName: "GetMbusState",
			Handler:    _Synerex_GetMbusState_Handler,
		},
		{
			MethodName: "ForwardToGateway",
			Handler:    _Synerex_ForwardToGateway_Handler,
		},
		{
			MethodName: "CloseDemandChannel",
			Handler:    _Synerex_CloseDemandChannel_Handler,
		},
		{
			MethodName: "CloseSupplyChannel",
			Handler:    _Synerex_CloseSupplyChannel_Handler,
		},
		{
			MethodName: "CloseAllChannels",
			Handler:    _Synerex_CloseAllChannels_Handler,
		},
		{
			MethodName: "GetAccessToken",
			Handler:    _Synerex_GetAccessToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeDemand",
			Handler:       _Synerex_SubscribeDemand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeSupply",
			Handler:       _Synerex_SubscribeSupply_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMbus",
			Handler:       _Synerex_SubscribeMbus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeGateway",
			Handler:       _Synerex_SubscribeGateway_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "synerex.proto",
}
